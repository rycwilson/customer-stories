- if @story.errors.any?

  = turbo_stream.replace 'toaster' do
    = render('shared/toaster')

- else

  = turbo_stream.append 'main-modal-body' do

    / Note `model: [@success, @story]` does not work as it will infer a collection => must specify url
    = form_with( \
        model: @story,  
        url: @success ? success_story_path(@success) : company_stories_path(@company),
        id: 'new-story-form',
        data: { \
          controller: 'new-story',
          new_story_modal_outlet: '#main-modal',
          action: [ \
            'submit->new-story#validate',
            'turbo:submit-start->new-story#animateSubmitBtn'].join(' ') },
        html: { \
          novalidate: true,
          autocomplete: 'off' }) do |form|

      .form-group
        = form.label(:title, 'Story Title')
        / tabindex: '-1' allows manual focus
        / TODO but it prevents the field from being focused when cycling with tab
        = form.text_field( \
            :title,
            class: 'form-control',
            required: true,
            tabindex: '-1',
            data: { new_story_target: 'storyTitle' })
        .help-block.with-errors

      = form.fields_for(:success, form.object.build_success) do |success_fields|
        / By explicitly rendering the id field here, we avoid automatic rendering of the id field due to the fields_for block
        / => here the id field will be used to create a new customer win (unlike instances below where the field is disabled)
        / => note that Rails 7 adds the `include_id` option to prevent automatically rendering the id field
        = success_fields.hidden_field(:id, disabled: @success.present?, data: { new_story_target: 'successField' })
        = success_fields.hidden_field(:name, disabled: @success.present?, data: { new_story_target: 'successName successField' })
        = success_fields.check_box( \
            :placeholder,
            { checked: @success.nil?, hidden: true, disabled: @success.present?, data: { new_story_target: 'successPlaceholder successField' } },
            true,
            false)

        = success_fields.fields_for(:customer, @company.customers.build) do |customer_fields|
          = customer_fields.hidden_field(:id, disabled: @success.present?, data: { new_story_target: 'customerField'})
          = customer_fields.hidden_field(:name, disabled: @success.present?, data: { new_story_target: 'customerName customerField' })
          = customer_fields.hidden_field(:company_id, disabled: @success.present?, data: { new_story_target: 'customerField' })
      
      = form.fields_for(:success, @success || form.object.build_success) do |success_fields|
        / By explicitly rendering the id field here, we avoid automatic rendering of the id field due to the fields_for block
        / => this allows us to permanently disable it since it is only used in the case of a new customer win
        / => note that Rails 7 adds the `include_id` option to prevent automatically rendering the id field
        = success_fields.hidden_field(:id, disabled: true)

        / tomselect_prevent_focus_value: @success.present?,
        / call compact on the options hash to ensure element receives the default name attribute if @success.present? == false
        .form-group
          = success_fields.label(:customer_id, 'Customer')
          = success_fields.collection_select( \
              :customer_id,
              @company.customers,
              :id,
              :name,
              { include_blank: true },
              { name: ('' if @success.present?),
                class: 'form-control',
                placeholder: 'Select or enter the name of a new Customer',
                required: true,
                data: { \
                  controller: 'tomselect',
                  new_story_target: 'customerSelect',
                  tomselect_kind_value: 'customer',
                  tomselect_custom_options_value: { create: true, persist: false, selectOnTab: true },
                  action: 'new-story#onChangeCustomer',
                  field_name: "#{success_fields.object_name}[customer_id]" } }.compact)
          .help-block.with-errors 

      / tomselect_prevent_focus_value: @success.present?,
      .form-group data-action="tomselect:dropdown-did-open->new-story#filterCustomerWinOptions"
        = form.label(:success_id, 'Customer Win')
        
        / can't use collection_select here because we need to add data-customer-id to the options 
        / (the Curate page may not have access to the successes table)      
        = form.select( \
            :success_id,
            options_for_select( \
              @company.successes.where.not(placeholder: true).order(:name).map(&:select_option),
              selected: @success&.id),
            { include_blank: true },
            { name: ('' if @success.nil?),
              class: 'form-control',
              placeholder: 'Select or enter the name of a new Customer Win',
              data: { \
                controller: 'tomselect',
                tomselect_kind_value: 'customerWin',
                tomselect_custom_options_value: { create: true, persist: false },
                new_story_target: 'customerWinSelect',
                action: 'new-story#onChangeCustomerWin',
                field_name: "#{form.object_name}[success_id]" } }.compact)
        .help-block 
          | Optional

      = form.fields_for(:success, @success || form.object.build_success(curator_id: current_user.id)) do |success_fields|
        / By explicitly rendering the id field here, we avoid automatic rendering of the id field due to the fields_for block
        / => this allows us to permanently disable it since it is only used in the case of a new customer win
        / => note that Rails 7 adds the `include_id` option to prevent automatically rendering the id field
        = success_fields.hidden_field(:id, disabled: true)

        /.form-group 
          = form.label(:story_category_ids, 'Category Tags')
          = success_fields.collection_select( \
              :story_category_ids,
              @company.story_categories,
              :id,
              :name,
              {},
              { class: 'form-control',
                multiple: true,
                data: { \
                  controller: 'tomselect',
                  tomselect_kind_value: 'storyTag',
                  dynamic_placeholder: 'Select' } })
          .help-block 
            | Optional

        /.form-group 
          = form.label(:product_ids, 'Product Tags')
          = success_fields.collection_select( \
              :product_ids,
              @company.products,
              :id,
              :name,
              {},
              { class: 'form-control',
                multiple: true,
                data: { \
                  controller: 'tomselect',
                  tomselect_kind_value: 'storyTag',
                  dynamic_placeholder: 'Select' } })
          .help-block 
            | Optional

        .form-group
          = success_fields.label(:curator_id, 'Curator')
          = success_fields.collection_select( \
              :curator_id,
              @company.curators,
              :id,
              :full_name,
              { include_blank: true },
              { name: ('' if @success&.curator.present?),
                class: 'form-control',
                placeholder: 'Select',
                required: true,
                data: { \
                  controller: 'tomselect',
                  tomselect_kind_value: 'curator',
                  tomselect_custom_options_value: { plugins: {} },
                  field_name: "#{success_fields.object_name}[curator_id]" } }.compact)
          .help-block

  = turbo_stream.append 'main-modal-content' do 
    .modal-footer data-modal-target="footer"
      button.btn.btn-default type="button" data-dismiss="modal" Cancel
      
      // `form.submit` or `submit_tag` will result in an input element with a value attribute
      // that can't be html. So use a button instead. Also we need button_tag so we can interpolate.
      // Button text content is set via data attribute / css.
      // Don't omit type="submit" as it is a css selector.
      = button_tag( \
          '',
          type: 'submit',
          class: 'btn btn-success',
          form: 'new-story-form',
          data: { content: 'Create Story', disable_with_html: disabled_submit_button_html })
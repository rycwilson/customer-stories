= turbo_stream.append 'main-modal-body' do
  = form_with( \
      model: [@company, @success],
      format: :js,
      id: 'new-customer-win-form',
      data: { \
        controller: 'new-customer-win',
        action: [ \
          'submit->new-customer-win#validate',
          'turbo:submit-start->new-customer-win#animateSubmitBtn'].join(' ') },
      html: { \
        novalidate: true,
        autocomplete: 'off' }) do |form|

    = form.fields_for(:customer, form.object.customer || form.object.build_customer) do |customer_fields|
      = customer_fields.hidden_field(:id, value: '', disabled: true, data: { new_customer_win_target: 'customerField' })
      = customer_fields.hidden_field(:name, disabled: true, data: { new_customer_win_target: 'customerName customerField' })
      = customer_fields.hidden_field( \
          :company_id,
          value: @company.id,
          disabled: true,
          data: { new_customer_win_target: 'customerField' })

    .form-group
      = form.label(:customer_id, 'Customer', class: 'control-label') 
      = form.collection_select( \
          :customer_id,
          @company.customers.sort_by(&:name),
          :id,
          :name,
          { include_blank: true,
            selected: @customer_id || [] },
          { class: 'form-control',
            placeholder: 'Select or add a new Customer',
            required: true,
            data: { \
              controller: 'tomselect',
              new_customer_win_target: 'customerSelect',
              tomselect_kind_value: 'customer',
              tomselect_custom_options_value: { create: true, persist: false, plugins: {} },
              action: 'new-customer-win#onChangeCustomer',
              field_name: "#{form.object_name}[customer_id]" } })
      .help-block.with-errors

    .form-group
      = form.label(:name, class: 'control-label') 
      = form.text_field( \
          :name,
          class: 'form-control',
          required: true,
          placeholder: 'Name of Deal or Opportunity from CRM')
      .help-block.with-errors

    .form-group
      = form.label(:win_story_html, 'Description', class: 'control-label')
      = form.text_area( \
          :win_story_html,
          rows: 4,
          class: 'form-control',
          placeholder: 'Description of Deal or Opportunity from CRM')
      .help-block 
        | Optional

    = form.fields_for(:contributions, form.object.contributions.build) do |contribution_fields|
      / TODO: this should change based on presence/absence of referrer/contributor, also needs db default
      /= contribution_fields.hidden_field( \
          :invitation_template_id, \
          value: ...)

      .form-group
        = contribution_fields.label(:referrer_id, 'Referred by', class: 'control-label')
        = contribution_fields.collection_select( \
            :referrer_id,
            @company.referrers \
              .sort_by { |referrer| referrer.last_name } \
              .unshift(User.new(id: 0, first_name: 'New', last_name: 'Contact')),
            :id,
            :full_name,
            { include_blank: true },
            { name: '',
              class: 'form-control',
              placeholder: 'Select or add a new Contact',
              data: { \
                controller: 'tomselect',
                tomselect_kind_value: 'referrer',
                new_customer_win_target: 'referrerSelect',
                action: 'new-customer-win#onChangeContact',
                field_name: "#{contribution_fields.object_name}[referrer_id]" } })
        .help-block 
          | Optional
                  
      = render( \
          'companies/shared/new_contact', 
          parent_form_or_fields: contribution_fields, 
          controller_id: 'new-customer-win', 
          contact_type: 'referrer')

    = form.fields_for(:contributions, form.object.contributions.build) do |contribution_fields|
      = contribution_fields.check_box( \
          :success_contact,
          { checked: true,
            hidden: true,
            disabled: true,
            data: { new_customer_win_target: 'customerContactBoolField contributorField' } },
          true,
          false)
      .form-group
        = contribution_fields.label(:contributor_id, 'Customer Contact', class: 'control-label')
        = contribution_fields.collection_select( \
            :contributor_id,
            (@company.contributors + @company.referrers).uniq \
              .sort_by { |contact| contact.last_name } \
              .unshift(User.new(id: 0, first_name: 'New', last_name: 'Contact')),
            :id,
            :full_name,
            { include_blank: true },
            { name: '',
              class: 'form-control',
              placeholder: 'Select or add a new Contact',
              data: { \
                controller: 'tomselect',
                tomselect_kind_value: 'contributor',
                new_customer_win_target: 'contributorSelect',
                action: 'new-customer-win#onChangeContact new-customer-win#onChangeCustomerContact',
                field_name: "#{contribution_fields.object_name}[contributor_id]" } })
        .help-block 
          | Optional 

      = render( \
          'companies/shared/new_contact', 
          parent_form_or_fields: contribution_fields,
          controller_id: 'new-customer-win', 
          contact_type: 'contributor')

    .form-group
      = form.label(:curator_id, 'Curator')
      = form.collection_select( \
          :curator_id,
          @company.curators.sort_by { |curator| curator.last_name },
          :id,
          :full_name,
          { include_blank: true,
            selected: @curator_id || [] },
          { class: 'form-control',
            placeholder: 'Select',
            required: true,
            data: { \
              controller: 'tomselect',
              tomselect_kind_value: 'curator',
              tomselect_custom_options_value: { plugins: {} } }})
      .help-block.with-errors     

= turbo_stream.append 'main-modal-content' do 
  .modal-footer data-modal-target="footer"
    button.btn.btn-default type="button" data-dismiss="modal" Cancel
    = button_tag( \
        '',
        type: 'submit',
        class: 'btn btn-success',
        form: 'new-customer-win-form',
        data: { content: 'Create Customer Win', disable_with_html: disabled_submit_button_html })

  /div style="display:flex; align-items:center"
    = form.submit(class: 'btn btn-success', data: { new_customer_win_target: 'submitBtn' })
  /.form-group.source
    label.control-label Source
    div
      .btn-group data-action="change->new-customer-win#onChangeSource" role="tablist"
        = label_tag('source_create', class: 'radio-inline') do
          = radio_button_tag( \
              'source', 
              'create', 
              true, 
              aria_controls: 'customer-win-fields', 
              data: { target: '#customer-win-fields' })
          | Create manually
        = label_tag('source_import', class: 'radio-inline') do
          = radio_button_tag( \
              'source', 
              'import',
              false,
              aria_controls: 'csv-file-upload',
              data: { target: '#csv-file-upload' })
          | Import CSV
  /.tab-content
    .tab-pane id="csv-file-upload" role="tabpanel"
      .form-group.csv-file.required-input
        label.control-label File
        .col-sm-8
          .fileinput.fileinput-new.input-group data-provides="fileinput"
            .form-control data-trigger="fileinput"
              i.glyphicon.glyphicon-file.fileinput-exists
              .fileinput-filename.placeholder Upload
            .input-group-addon.btn.btn-default.btn-file
              label for="csv-file-input"
                i.fa.fa-fw.fa-upload
                input type="file" id="csv-file-input" style="display:none"
          span.help-block

/      .tab-pane.active role="tabpanel"




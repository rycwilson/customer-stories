// https://codepen.io/sosuke/pen/Pjoqqp
@mixin svg-fill($hex: black) {
  @if $hex == white {
    filter: invert(100%) sepia(0%) saturate(0%) hue-rotate(42deg) brightness(106%) contrast(102%);
  } @else if $hex == #f9f9f9 {
    filter: invert(100%) sepia(5%) saturate(486%) hue-rotate(214deg) brightness(113%) contrast(95%);
  } @else if $hex == #666666 {
    filter: invert(45%) sepia(0%) saturate(1878%) hue-rotate(216deg) brightness(89%) contrast(96%);
  } @else if $hex == #555555 {
    filter: invert(32%) sepia(0%) saturate(0%) hue-rotate(179deg) brightness(93%) contrast(83%);
  } @else if $hex == #333333 {
    filter: invert(11%) sepia(96%) saturate(0%) hue-rotate(171deg) brightness(101%) contrast(83%);
  } @else {
    // the svgs have fill="black" by default
  }
}

@mixin row-hover-highlight {
  & > tbody, 
  &:not(.has-row-groups) > tbody {
    > tr:not(.dtrg-group),
    > tr:not(.dtrg-group).even {
      > td {
        transition: background-color 0.15s ease-in-out;
      }
    
      &:hover > td:not(.child-row) {
        background-color: $light-blue;
        transition: background-color 0.15s ease-in-out;
      }
    }
  }
}

@mixin absolute-centered {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%,-50%);
}

@mixin flex-row-center {
  display: flex;
  align-items: center;
}

@mixin flex-row-end {
  display: flex;
  align-items: flex-end
}

@mixin flex-row-center-start {
  @include flex-row-center;
  justify-content: flex-start;
}

@mixin flex-row-center-center {
  @include flex-row-center;
  justify-content: center;
}

@mixin flex-row-center-end {
  @include flex-row-center;
  justify-content: flex-end;
}

@mixin flex-row-center-between {
  @include flex-row-center;
  justify-content: space-between;
}

@mixin flex-row-end-between {
  @include flex-row-center-between;
  align-items: flex-end;
}

@mixin truncate-text {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin max-lines($max) {
  display: -webkit-box;
  -webkit-line-clamp: $max;  /* number of lines to show */
  -webkit-box-orient: vertical;
  overflow: hidden;
}

@mixin hide-until-init {
  visibility: hidden;

  &[data-init="true"] {
    visibility: visible;
  }
}

// @mixin fa-button($background-color) {
//   display: flex;
//   align-items:center;
//   background:none;
//   border: none;
//   outline: none;
//   color: #666;
//   font-size: 12px;
//   padding: 4px;
//   &:hover {
//     color: #222;
//   }
//   i {
//     -webkit-text-stroke: 1px $background-color;  // should match background color
//     &.fa-question {
//       -webkit-text-stroke: 0.5px $background-color;
//       top: -1px;
//       left: -0.5px;
//     }
//   }
//   &[disabled] {
//     &:hover {
//       color: #666;
//       cursor: not-allowed;
//     }
//   }
// }

@mixin fa-spinner($width) {
  width: $width;

  input {
    text-align: right;
  }

  .spinner__buttons {
    position: relative;
    white-space: nowrap;
    width: 2%;
    vertical-align: middle;
    display: table-cell;
  }

  .btn {
    display: block;
    float: none;
    width: 100%;
    max-width: 100%;
    padding: 8px;
    margin-left: -1px;
    position: relative;
    border-radius: 0;

    &[data-input-spinner-target="incrementBtn"] {
      border-top-right-radius: 4px;
    }

    &[data-input-spinner-target="decrementBtn"] {
      margin-top: -2px;
      border-bottom-right-radius: 4px;
    }
  }

  i {
    position: absolute;
    top: 0;
    left: 4px;
  }

  &[disabled] {
    opacity: 0.5;
    pointer-events: none;
  }
}

// http://hackingui.com/front-end/a-pure-css-solution-for-multiline-text-truncation/
// @mixin multiline-ellipsis($line-height: 1.2em, $line-count: 1, $bg-color: transparent){
//   overflow: hidden;
//   position: relative;
//   line-height: $line-height;
//   max-height: $line-height * $line-count; 
//   // text-align: justify;
//   margin-right: -1em;
//   padding-right: 1em;
//   &:before {
//     content: '...';
//     position: absolute;
//     right: 0;
//     bottom: 0;
//   }
//   &:after {
//     content: '';
//     position: absolute;
//     right: 0;
//     width: 1em;
//     height: 1em;
//     margin-top: 0.2em;
//     background: $bg-color;
//   }
// }

@mixin bs-xs {
  @media (max-width: 767px) {
    @content;
  }
}

@mixin bs-sm {
  @media (min-width: 768px) {
    @content;
  }
}

@mixin bs-md {
  @media (min-width: 992px) {
    @content;
  }
}

@mixin bs-lg {
  @media (min-width: 1200px) {
    @content;
  }
}

@mixin customer-logo($bg-color) {
  display: flex;
  margin: 30px 0 !important;  // pixlee blog override
  background-color: $bg-color;  // need this for the mix-blend-mode to work correctly

  > div {
    max-width: 50%;  // this can be wider for the quote-logo horizontal layout
    img {
      margin: 0 auto;
      max-height: 65px;
      mix-blend-mode: multiply;
    }
  }

  .customer-name, 
  .cs-customer-name {
    color: #888;
    margin-top: 20px;
    span {
      font-size: 16px !important;
    }
  }

  @include bs-sm {
    justify-content: center;
    
    > div {
      img {
        max-height: 80px;
      }
    }
  }

  @include bs-lg {
    .customer-name, 
    .cs-customer-name {
      margin-top: 25px;
      span {
        font-size: 18px !important;
      }
    }
  }
}

@mixin submitting {
  position: relative;

  // A pseudo-element keeps the button size consistent while submitting/disabled.
  // .btn__content won't affect button size since it is absolutely positioned.
  &::before {
    content: attr(data-content);
  }

  &[disabled]::before {
    visibility: hidden;
  }

  .btn__content,
  .btn__dots {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .btn__dots {
    @include flex-row-center;

    visibility: hidden;
    opacity: 0;

    i {
      opacity: 0;
      font-size: 0.5em;
      animation: dot 1s infinite;
      margin: 0 0.35em;
    }

    :nth-child(1) {
      animation-delay: 0.8s;
    }

    :nth-child(2) {
      animation-delay: 0.9s;
    }

    // There is a short window when all dots are transparent.
    // Set the animation-delay on the last dot to whatever the wait time is for the button 
    // to transition (say, 1s) minus 150ms so that the animation starts at the midpoint of this window. 
    // Adjust the other animation delays accordingly (all 0.1s apart).
    // Nice and smooth!
    // Even bettter: Align the wait time for the button with the last dot's animation delay,
    // then introduce the 150ms offset via the transition time (under .still-working).
    :nth-child(3) {
      animation-delay: 0.1s;
    }
    
    @keyframes dot {
      0% { opacity: 0; }
      50% { opacity: 0; }
      100% { opacity: 1; }
    }
  }

  &.btn--working {
    .btn__content,
    .btn__dots {
      transition: visibility 0.15s ease-in, opacity 0.15s ease-in;
    }

    .btn__content {
      visibility: hidden;
      opacity: 0;
    }

    .btn__dots {
      visibility: visible;
      opacity: 1;
    }
  }
}

@mixin spinner($size) {
  > .spinner {
    display: flex;
    justify-content: center;

    @if $size == 'sm' {
      @include lds-ring(30px);
    } @else if $size == 'md' {
      @include lds-ring(40px);
    } @else if $size == 'lg' {
      @include lds-ring(50px);
    }
  }
}

// https://loading.io/css/
@mixin lds-ring($size) {
  $margin: round($size * .5);
  $thickness: round($size * .075);

  > .lds-ring {
    display: inline-block;
    position: relative;
    width: $size + ($margin * 2);
    height: $size + ($margin * 2);
  
    div {
      box-sizing: border-box;
      display: block;
      position: absolute;
      width: $size;
      height: $size;
      margin: $margin;
      border: $thickness solid $gray-light;
      border-radius: 50%;
      animation: lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;
      border-color: $gray-light transparent transparent transparent;
    }
    
    div:nth-child(1) {
      animation-delay: -0.45s;
    }
    
    div:nth-child(2) {
      animation-delay: -0.3s;
    }
    
    div:nth-child(3) {
      animation-delay: -0.15s;
    }
  }
  
  @keyframes lds-ring {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
}